// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    Not(in=address[14], out=not14);
    And(a=not14, b=load, out=load16K);
    RAM16K(in=in, load=load16K, address=address[0..13], out=out16K);

    Not(in=address[13], out=not13);
    And(a=address[14], b=not13, out=and14not13);
    And(a=load, b=and14not13, out=loadScreen);
    Screen(in=in, load=loadScreen, address=address[0..12], out=ScreenOut);

    Nor(a=address[12], b=address[11], out=nor1);
    Nor(a=address[10], b=address[9],  out=nor2);
    Nor(a=address[8], b=address[7], out=nor3);
    Nor(a=address[6], b=address[5], out=nor4);
    Nor(a=address[4], b=address[3], out=nor5);
    Nor(a=address[2], b=address[1], out=nor6);

    Not(in=address[0], out=not0);
    
    And(a=nor1, b=nor2, out=and1);
    And(a=nor3, b=nor4, out=and2);
    And(a=nor5, b=nor6, out=and3);

    And(a=and1, b=and2, out=and4);
    And(a=and3, b=not0, out=and5);

    // are address[0..12] all zeros?
    And(a=and4, b=and5, out=and6);

    And(a=address[14], b=address[13], out=and1413);
    And(a=and1413, b=and6, out=KBDload);

    Keyboard(out=KBD);

    Mux16(a=ScreenOut, b=KBD, sel=address[13], out=mux1out);
    Mux16(a=out16K, b=mux1out, sel=address[14], out=out);
}
