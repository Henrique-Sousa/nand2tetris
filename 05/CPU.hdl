// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Not(in=instruction[15], out=notOpcode);
    Mux16(a=ALUout, b=instruction, sel=notOpcode, out=toA);

    Or(a=instruction[5], b=notOpcode, out=Aload);
    /* A register */
    Register(in=toA, load=Aload, out=Aout, out[0..14]=addressM);

    And(a=instruction[15], b=instruction[4], out=Dload);
    /* D register */
    Register(in=ALUout, load=Dload, out=Dout);

    And(a=instruction[15], b=instruction[12], out=opANDa);
    Mux16(a=Aout, b=inM, sel=opANDa, out=toY);
    
    ALU(x=Dout, y=toY, 
      zx=instruction[11],
      nx=instruction[10],
      zy=instruction[9],
      ny=instruction[8],
       f=instruction[7],
      no=instruction[6],
      out=outM,
      out=ALUout,
      zr=zr,
      ng=ng);

    Not(in=instruction[2], out=notj1);
    Not(in=instruction[1], out=notj2);
    Not(in=instruction[0], out=notj3);
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    And5Way(in[0]=notj1,          in[1]=notj2,          in[2]=instruction[0], in[3]=notzr,  in[4]=notng, out=and0);
    And5Way(in[0]=notj1,          in[1]=instruction[1], in[2]=notj3,          in[3]=zr,     in[4]=notng, out=and1);
    And5Way(in[0]=notj1,          in[1]=instruction[1], in[2]=instruction[0], in[3]=notzr,  in[4]=notng, out=and2);
    And5Way(in[0]=notj1,          in[1]=instruction[1], in[2]=instruction[0], in[3]=zr,     in[4]=notng, out=and3);
    And5Way(in[0]=instruction[2], in[1]=notj2,          in[2]=notj3,          in[3]=notzr,  in[4]=ng,    out=and4);
    And5Way(in[0]=instruction[2], in[1]=notj2,          in[2]=instruction[0], in[3]=notzr,  in[4]=notng, out=and5);
    And5Way(in[0]=instruction[2], in[1]=notj2,          in[2]=instruction[0], in[3]=notzr,  in[4]=ng,    out=and6);
    And5Way(in[0]=instruction[2], in[1]=instruction[1], in[2]=notj3,          in[3]=notzr,  in[4]=ng,    out=and7);
    And5Way(in[0]=instruction[2], in[1]=instruction[1], in[2]=notj3,          in[3]=zr,     in[4]=notng, out=and8);
    And5Way(in[0]=instruction[2], in[1]=instruction[1], in[2]=instruction[0], in[3]=notzr,  in[4]=notng, out=and9);
    And5Way(in[0]=instruction[2], in[1]=instruction[1], in[2]=instruction[0], in[3]=notzr,  in[4]=ng,    out=and10);
    And5Way(in[0]=instruction[2], in[1]=instruction[1], in[2]=instruction[0], in[3]=zr,     in[4]=notng, out=and11);
    Or12Way(
      in[0]=and0,
      in[1]=and1,
      in[2]=and2,
      in[3]=and3,
      in[4]=and4,
      in[5]=and5,
      in[6]=and6,
      in[7]=and7,
      in[8]=and8,
      in[9]=and9,
      in[10]=and10,
      in[11]=and11,
      out=or12out);
    And(a=instruction[15], b=or12out, out=PCload);

    PC(in=Aout, load=PCload, inc=true, reset=reset, out[0..14]=pc);
    /* inc sempre true? se nao:*/
    //Not(in=PCload, out=PCinc);
    //PC(in=Aout, load=PCload, inc=PCinc, reset=reset, out[0..14]=pc);

    And(a=instruction[15], b=instruction[3], out=writeM);

}
